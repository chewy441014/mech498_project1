function z401ManipulatorDesignHollowR()

clear all
close all
clc

robot = basketInit();

% robot = robotInit array

% Cross-sectional areas of each arm member
d1 = robot.parameters.d_1;
d2 = robot.parameters.d_2;
d3 = robot.parameters.d_3;
d4 = robot.parameters.d_4;

%inner diameters for wall thickness of .0075
b1 = d1-.005;
b2 = d2-.005;
b3 = d3-.005;
b4 = d4-.005;

A1 = d1^2-b1^2;
A2 = d2^2-b2^2;
A3 = d3^2-b3^2;
A4 = d4^2-b4^2;

%Constants for deflection,SF
g = robot.const.g;
rho = robot.const.rho;
E = robot.const.E;
Sy = robot.const.Sy;


l1 = robot.parameters.l_1;
l2 = robot.parameters.l_2;
l3 = robot.parameters.l_3;
l4 = robot.parameters.l_4;

m1 = A1*l1*rho;
m2 = A2*l2*rho;
m3 = A3*l3*rho;
m4 = A4*l4*rho;
m5 = 2;

mass=m2+m3+m4

% Test joint torques at the zero position
joint_angles = [0;-pi/2;pi/2;0;0];
joint_vel = [0;0;0;0;0];

[T, ~] = basketFK(joint_angles, robot);
x=T*[0;0;0;1]+[0;0;l1;0];

%Draw robot in the given load case
drawBasket(joint_angles,x,robot)

%Compare forces generated by code to FBD
[forces, moments]=z401ForceFinder(joint_angles,[0;0;0;0;0],[0;0;0;0;0])

[~, ~, G] = basketDynamics(joint_angles, joint_vel, robot);
tau = G;


%% Member 4

%F5 = m4*g + m5*g;
F5=norm(forces(:,4))

%Treating weight as a distributed load

x=linspace(0,l4,100);
w=m4*g/l4;
V4=w*(l4-x);
M4=-w/2*(l4-x).^2;

%Deflection of the first member
%Ymax1=(-w*l4^4)/(8*E*I4)

%bending Stress
Mmax4=abs(min(M4))
c=d4/2;
I4=(pi*d4^4)/64;
Sy
Sig_max4=Mmax4*c/I4
n4=Sy/Sig_max4

% T5=w*l4^2/2;
T5=norm(moments(:,4))


figure
subplot(2,1,1)
plot(x,V4)
xlabel('x (m)');
ylabel('Shear (N)');
title('Shear plot of Link 4')

subplot(2,1,2)
plot(x,M4)
xlabel('x (m)');
ylabel('Moment (N-m)');
title('Moment plot of Link 4')

%% Member 3

% F3=m3*g+F5;
% T3=m3*g*l3/2+T5+F5*l3;

F3=norm(forces(:,3))
T3=norm(moments(:,3))


x1=linspace(0,l3/2,50);
V31=F3+0*x1;
M31=F3*x1-T3;

x2=linspace(l3/2,l3,50);
V32=F5+0*x2;
M32=-F5*(l3-x2)-T5;

%bending Stress
Mmax3=abs(min([M31 M32]))
c=d3/2;
I3=(pi*d3^4)/64;
Sy;
Sig_max3=Mmax3*c/I3;
n3=Sy/Sig_max3


figure
 
subplot(2,1,1)
plot([x1 x2],[V31 V32],'-')
xlabel('x (m)');
ylabel('Shear (N)');
title('Shear plot of Link 3')

subplot(2,1,2)
plot([x1 x2],[M31 M32])
xlabel('x (m)');
ylabel('Moment (N-m)');
title('Moment plot of Link 3')


%% Member 2

% F2=F3+m2*g;
% T2=m2*g*l2/2+T3+F3*l2;

F2=norm(forces(:,2))
T2=norm(moments(:,2))

x1=linspace(0,l2/2,50);
V21=F2+0*x1;
M21=F2*x1-T2;

x2=linspace(l2/2,l2,50);
V22=F3+0*x2;
M22=-F3*(l2-x2)-T3;

%bending Stress
Mmax2=abs(min([M21 M22]))
c=d2/2;
I3=(pi*d2^4)/64;
Sy;
Sig_max2=Mmax2*c/I3;
n2=Sy/Sig_max2

figure
 
subplot(2,1,1)
plot([x1 x2],[V21 V22],'-')
xlabel('x (m)');
ylabel('Shear (N)');
title('Shear plot of Link 2')

subplot(2,1,2)
plot([x1 x2],[M21 M22])
xlabel('x (m)');
ylabel('Moment (N-m)');
title('Moment plot of Link 2')


%% Member 1

%Reaction forces at the ground
Rf=F2+m1*g;
Rm=T2;

%% Deflection of upper Arm

mmotor=1; %mass of motor at joints 4 and 5

%Deflection Constants
I2=(d2^4-b2^4)/12
I3=(d3^4-b3^4)/12
I4=(d4^4-b4^4)/12
L1=l2/2;
L2=l2+l3/2;
L3=l2+l3;
L4=l2+l3+l4/2;
L5=l2+l3+l4;

clear x
x=linspace(0,l2+l3+l4,100);
y1=zeros(length(x),1);
y2=zeros(length(x),1);
y3=zeros(length(x),1);
y4=zeros(length(x),1);
y5=zeros(length(x),1);
for i=1:length(x)
    if x(i)<l2
        I=I2;
    elseif x(i)<l3
        I=I3;
    else
        I=I4;
    end
    
    %deflection due to load 1
    if x(i)<L1
        y1(i)=((m2*g*x(i)^2)/(6*E*I))*(x(i)-3*L1);
    else
        y1(i)=((m2*g*L1^2)/(6*E*I))*(L1-3*x(i));
    end
    
    %deflection due to load 2
    if x(i)<L2
        y2(i)=((m3*g*x(i)^2)/(6*E*I))*(x(i)-3*L2);
    else
        y2(i)=((m3*g*L2^2)/(6*E*I))*(L2-3*x(i));
    end
    
    %deflection due to load 3
    if x(i)<L3
        y3(i)=((m4*g*x(i)^2)/(6*E*I))*(x(i)-3*L3);
    else
        y3(i)=((m4*g*L3^2)/(6*E*I))*(L3-3*x(i));
    end
    
    %deflection due to load 4
    
    if x(i)<L4
        y4(i)=((mmotor*g*x(i)^2)/(6*E*I))*(x(i)-3*L4);
    else
        y4(i)=((mmotor*g*L3^2)/(6*E*I))*(L4-3*x(i));
    end
    
    %deflection due to load 5
    if x(i)<L5
        y5(i)=((m5*g*x(i)^2)/(6*E*I))*(x(i)-3*L5);
    else
        y5(i)=((m5*g*L5^2)/(6*E*I))*(L5-3*x(i));
    end
end


%Superposition of loads
y=y1+y2+y3+y4+y5;
maxdef=min(y)
%plotting Deflection of links 3 and 4
figure
plot(x,y)
title('Deflection of Upper Arm for D=4.5 cm')
xlabel('Distance along Upper Arm (m)')
ylabel('Deflection (m)')


return